{"version":3,"sources":["forms/AddUserForm.js","forms/EditUserForm.js","tables/UserTable.js","App.js","serviceWorker.js","index.js"],"names":["AddUserForm","props","initialFormState","id","name","username","useState","user","setUser","handleInputChange","event","target","value","onSubmit","preventDefault","addUser","type","onChange","EditUserForm","currentUser","useEffect","updateUser","onClick","setEditing","className","UserTable","users","length","map","key","editRow","deleteUser","colSpan","App","setUsers","setCurrentUser","editing","updatedUser","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3b1d0519.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nconst AddUserForm = props => {\r\n\tconst initialFormState = { id: null, name: '', username: '' }\r\n\tconst [ user, setUser ] = useState(initialFormState)\r\n\r\n\tconst handleInputChange = event => {\r\n\t\tconst { name, value } = event.target\r\n\r\n\t\tsetUser({ ...user, [name]: value })\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form\r\n\t\t\tonSubmit={event => {\r\n\t\t\t\tevent.preventDefault()\r\n\t\t\t\tif (!user.name || !user.username) return\r\n\r\n\t\t\t\tprops.addUser(user)\r\n\t\t\t\tsetUser(initialFormState)\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<label>Name</label>\r\n\t\t\t<input type=\"text\" name=\"name\" value={user.name} onChange={handleInputChange} />\r\n\t\t\t<label>Username</label>\r\n\t\t\t<input type=\"text\" name=\"username\" value={user.username} onChange={handleInputChange} />\r\n\t\t\t<button>Add new user</button>\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\nexport default AddUserForm\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nconst EditUserForm = props => {\r\n  const [ user, setUser ] = useState(props.currentUser)\r\n\r\n  useEffect(\r\n    () => {\r\n      setUser(props.currentUser)\r\n    },\r\n    [ props ]\r\n  )\r\n  // You can tell React to skip applying an effect if certain values havenâ€™t changed between re-renders. [ props ]\r\n\r\n  const handleInputChange = event => {\r\n    const { name, value } = event.target\r\n\r\n    setUser({ ...user, [name]: value })\r\n  }\r\n\r\n  return (\r\n    <form\r\n      onSubmit={event => {\r\n        event.preventDefault()\r\n\r\n        props.updateUser(user.id, user)\r\n      }}\r\n    >\r\n      <label>Name</label>\r\n      <input type=\"text\" name=\"name\" value={user.name} onChange={handleInputChange} />\r\n      <label>Username</label>\r\n      <input type=\"text\" name=\"username\" value={user.username} onChange={handleInputChange} />\r\n      <button>Update user</button>\r\n      <button onClick={() => props.setEditing(false)} className=\"button muted-button\">\r\n        Cancel\r\n      </button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default EditUserForm\r\n","import React from 'react'\r\n\r\nconst UserTable = props => (\r\n  <table>\r\n    <thead>\r\n      <tr>\r\n        <th>Name</th>\r\n        <th>Username</th>\r\n        <th>Actions</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      {props.users.length > 0 ? (\r\n        props.users.map(user => (\r\n          <tr key={user.id}>\r\n            <td>{user.name}</td>\r\n            <td>{user.username}</td>\r\n            <td>\r\n              <button\r\n                onClick={() => {\r\n                  props.editRow(user)\r\n                }}\r\n                className=\"button muted-button\"\r\n              >\r\n                Edit\r\n              </button>\r\n              <button\r\n                onClick={() => props.deleteUser(user.id)}\r\n                className=\"button muted-button\"\r\n              >\r\n                Delete\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        ))\r\n      ) : (\r\n        <tr>\r\n          <td colSpan={3}>No users</td>\r\n        </tr>\r\n      )}\r\n    </tbody>\r\n  </table>\r\n)\r\n\r\nexport default UserTable\r\n","import React, { useState, Fragment } from 'react'\nimport AddUserForm from './forms/AddUserForm'\nimport EditUserForm from './forms/EditUserForm'\nimport UserTable from './tables/UserTable'\n\nconst App = () => {\n\t// Data\n\tconst usersData = [\n\t\t{ id: 1, name: 'Pavan Vanam', username: 'realPavanVanam' },\n\t\t{ id: 2, name: 'Modi Ji', username: 'jaiModiJi' },\n\t\t{ id: 3, name: 'Trump Mc. Donald', username: 'fakeTrump' },\n\t]\n\n\tconst initialFormState = { id: null, name: '', username: '' }\n\n\t// Setting state\n\tconst [ users, setUsers ] = useState(usersData)\n\tconst [ currentUser, setCurrentUser ] = useState(initialFormState)\n\tconst [ editing, setEditing ] = useState(false)\n\n\t// CRUD operations\n\tconst addUser = user => {\n\t\tuser.id = users.length + 1\n\t\tsetUsers([ ...users, user ])\n\t}\n\n\tconst deleteUser = id => {\n\t\tsetEditing(false)\n\n\t\tsetUsers(users.filter(user => user.id !== id))\n\t}\n\n\tconst updateUser = (id, updatedUser) => {\n\t\tsetEditing(false)\n\n\t\tsetUsers(users.map(user => (user.id === id ? updatedUser : user)))\n\t}\n\n\tconst editRow = user => {\n\t\tsetEditing(true)\n\n\t\tsetCurrentUser({ id: user.id, name: user.name, username: user.username })\n\t}\n\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<h1>CRUD App with Hooks</h1>\n\t\t\t<div className=\"flex-row\">\n\t\t\t\t<div className=\"flex-large\">\n\t\t\t\t\t{editing ? (\n\t\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t\t<h2>Edit user</h2>\n\t\t\t\t\t\t\t<EditUserForm\n\t\t\t\t\t\t\t\tediting={editing}\n\t\t\t\t\t\t\t\tsetEditing={setEditing}\n\t\t\t\t\t\t\t\tcurrentUser={currentUser}\n\t\t\t\t\t\t\t\tupdateUser={updateUser}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t\t<h2>Add user</h2>\n\t\t\t\t\t\t\t<AddUserForm addUser={addUser} />\n\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"flex-large\">\n\t\t\t\t\t<h2>View users</h2>\n\t\t\t\t\t<UserTable users={users} editRow={editRow} deleteUser={deleteUser} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}